#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Function to create a broadcast tree using BFS
void broadcastTree(vector<vector<int>> &adjList, int source) {
    int n = adjList.size();
    vector<bool> visited(n, false); // Track visited nodes
    vector<int> parent(n, -1);      // Track parent nodes to form the tree

    queue<int> q;
    q.push(source);
    visited[source] = true;

    cout << "Broadcast Tree (Parent -> Child):\n";

    while (!q.empty()) {
        int current = q.front();
        q.pop();

        for (int neighbor : adjList[current]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                parent[neighbor] = current;
                q.push(neighbor);
                cout << current << " -> " << neighbor << endl;
            }
        }
    }
}

int main() {
    int nodes, edges;
    
    // Input number of nodes and edges
    cout << "Enter the number of nodes: ";
    cin >> nodes;
    cout << "Enter the number of edges: ";
    cin >> edges;

    vector<vector<int>> adjList(nodes);

    cout << "Enter the edges (node1 node2):\n";
    for (int i = 0; i < edges; ++i) {
        int u, v;
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u); // Assuming an undirected graph
    }

    int source;
    cout << "Enter the source node for broadcasting: ";
    cin >> source;

    if (source >= 0 && source < nodes) {
        broadcastTree(adjList, source);
    } else {
        cout << "Invalid source node!" << endl;
    }

    return 0;
}

/*
INPUT
Enter the number of nodes: 6
Enter the number of edges: 5
Enter the edges (node1 node2):
0 1
0 2
1 3
1 4
2 5
Enter the source node for broadcasting: 0

OUTPUT
Broadcast Tree (Parent -> Child):
0 -> 1
0 -> 2
1 -> 3
1 -> 4
2 -> 5
*/